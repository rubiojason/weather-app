[{"C:\\Users\\Jason Rubio\\Desktop\\weather-api\\src\\index.js":"1","C:\\Users\\Jason Rubio\\Desktop\\weather-api\\src\\App.js":"2","C:\\Users\\Jason Rubio\\Desktop\\weather-api\\src\\reportWebVitals.js":"3","C:\\Users\\Jason Rubio\\Desktop\\weather-api\\src\\components\\MainPage.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":188,"mtime":1608225038220,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":22337,"mtime":1608333891532,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"euiez7",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\Jason Rubio\\Desktop\\weather-api\\src\\index.js",[],["20","21"],"C:\\Users\\Jason Rubio\\Desktop\\weather-api\\src\\App.js",[],"C:\\Users\\Jason Rubio\\Desktop\\weather-api\\src\\reportWebVitals.js",[],"C:\\Users\\Jason Rubio\\Desktop\\weather-api\\src\\components\\MainPage.js",["22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport axios from 'axios'\r\nimport gsap from 'gsap'\r\n\r\nfunction MainPage() {\r\n\r\n    //document \r\n    document.body.style.backgroundRepeat = \"no-repeat\"\r\n    document.body.style.backgroundSize = \"cover\"\r\n    //document \r\n\r\n    //useRef \r\n    const cityStateAnim = useRef(null)\r\n    const tempDivAnim = useRef(null)\r\n    const inputAnim = useRef(null)\r\n\r\n    const weatherDesAnim = useRef(null)\r\n    const weatherHighAnim = useRef(null)\r\n    const weatherLowAnim = useRef(null)\r\n\r\n    const pressTitleAnim = useRef(null)\r\n    const pressDataAnim = useRef(null)\r\n\r\n    const humiTitleAnim = useRef(null)\r\n    const humiDataAnim = useRef(null)\r\n\r\n    const windTitleAnim = useRef(null)\r\n    const windDataAnim = useRef(null)\r\n    //useRef\r\n\r\n    //useState \r\n    const [globalNumber, setGlobalNumber] = useState(0)\r\n\r\n    const [bodyBackground, setBodyBackground] = useState(\"\")\r\n\r\n    const [cityInput, setCityInput] = useState('san+diego')\r\n\r\n    const [button1Color, setButton1Color] = useState('rgba(22, 49, 114, 0.7)')\r\n    const [button2Color, setButton2Color] = useState('rgba(255, 255, 255, 0.2)')\r\n    const [button3Color, setButton3Color] = useState('rgba(255, 255, 255, 0.2)')\r\n\r\n    const [city, setCity] = useState('')\r\n    const [country, setCountry] = useState('')\r\n    const [population, setPopulation] = useState('')\r\n\r\n    const [actualTemp, setActualTemp] = useState('')\r\n    const [minTemp, setMinTemp] = useState('')\r\n    const [maxTemp, setMaxTemp] = useState('')\r\n\r\n    const [feelsLike, setFeelsLike] = useState('')\r\n\r\n    const [humidity, setHumidity] = useState('')\r\n    const [pressure, setPressure] = useState('')\r\n    const [windSpeed, setWindSpeed] = useState('')\r\n\r\n    const [dayDescription, setDayDescription] = useState('')\r\n    const [dayMain, setDayMain] = useState('')\r\n\r\n    const [today, setToday] = useState('')\r\n    const [tomorrow, setTomorrow] = useState('')\r\n    const [twoTomorrow, setTwoTomorrow] = useState('')\r\n\r\n    const [errorOpacity, setErrorOpacity] = useState(0)\r\n    //useState \r\n\r\n    document.body.style.background = bodyBackground\r\n\r\n    //useEffect \r\n    useEffect(() => {\r\n        axios.get('http://api.openweathermap.org/data/2.5/forecast?q=' + cityInput + '&appid=2ccb7d2b46e1765b3c0cd9d9135e88cd')\r\n\r\n        .then(res => {\r\n            const info = res.data \r\n\r\n            console.log(info)\r\n\r\n            setCity(info.city.name)\r\n            setCountry(info.city.country)\r\n            setPopulation(info.city.population)\r\n\r\n            var actualtemp = []\r\n            var mintemp = []\r\n            var maxtemp = []\r\n\r\n            var feelslike = []\r\n\r\n            var humidity = []\r\n            var pressure = []\r\n            var windspeed = []\r\n\r\n            var daydescription = []\r\n            var daymain = []\r\n\r\n            for (let i = 0; i < 5; i++) {\r\n                actualtemp.push((info.list[i].main.temp - 273.15) * 9/5 + 32)\r\n                mintemp.push((info.list[i].main.temp_min - 273.15) * 9/5 + 32)\r\n                maxtemp.push((info.list[i].main.temp_max - 273.15) * 9/5 + 32)\r\n\r\n                feelslike.push((info.list[i].main.feels_like - 273.15) * 9/5 + 32)\r\n\r\n                humidity.push(info.list[i].main.humidity)\r\n                pressure.push(info.list[i].main.pressure)\r\n                windspeed.push(info.list[i].wind.speed * 2.237)\r\n\r\n                daydescription.push(info.list[i].weather[0].description)\r\n                daymain.push(info.list[i].weather[0].main)\r\n            }\r\n            setActualTemp(actualtemp)\r\n            setMinTemp(mintemp)\r\n            setMaxTemp(maxtemp)\r\n\r\n            setFeelsLike(feelslike)\r\n\r\n            setHumidity(humidity)\r\n            setPressure(pressure)\r\n            setWindSpeed(windspeed)\r\n\r\n            setDayDescription(daydescription)\r\n            setDayDescription(daydescription)\r\n            setDayMain(daydescription)\r\n\r\n\r\n            setErrorOpacity(0)\r\n\r\n            if (dayDescription.includes('rain') || dayMain.includes('rain')) {\r\n                setBodyBackground(\"url('https://images.pexels.com/photos/3742711/pexels-photo-3742711.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940')\")\r\n            }\r\n    \r\n            else if (dayDescription.includes('snow') || dayMain.includes('snow')) {\r\n                setBodyBackground(\"url('https://images.pexels.com/photos/414459/pexels-photo-414459.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940')\")\r\n            }\r\n    \r\n            else {\r\n                setBodyBackground(\"url('https://images.pexels.com/photos/2114014/pexels-photo-2114014.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940')\")\r\n            }\r\n        })\r\n\r\n        .catch(err => {\r\n            const errMsg = err.msg\r\n            console.log(errMsg)\r\n            setErrorOpacity(1)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        var today = \"\"\r\n        var objToday = new Date(),\r\n            weekday = new Array('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'),\r\n            dayOfWeek = weekday[objToday.getDay()],\r\n            domEnder = function() { var a = objToday; if (/1/.test(parseInt((a + \"\").charAt(0)))) return \"th\"; a = parseInt((a + \"\").charAt(1)); return 1 == a ? \"st\" : 2 == a ? \"nd\" : 3 == a ? \"rd\" : \"th\" }(),\r\n            dayOfMonth = today + ( objToday.getDate() < 10) ? '' + objToday.getDate() + domEnder : objToday.getDate() + domEnder,\r\n            months = new Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'),\r\n            curMonth = months[objToday.getMonth()],\r\n            today = curMonth + \" \" + dayOfWeek + \" \" + dayOfMonth\r\n        setToday(today)\r\n\r\n        var tomorrow = \"\"\r\n        \r\n        var objTomorrow = new Date(new Date().getTime() + 24 * 60 * 60 * 1000),\r\n            weekday2 = new Array('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'),\r\n            dayOfWeek2 = weekday2[objToday.getDay()],\r\n            domEnder2 = function() { var a = objTomorrow; if (/1/.test(parseInt((a + \"\").charAt(0)))) return \"th\"; a = parseInt((a + \"\").charAt(1)); return 1 == a ? \"st\" : 2 == a ? \"nd\" : 3 == a ? \"rd\" : \"th\" }(),\r\n            dayOfMonth2 = tomorrow + ( objTomorrow.getDate() < 10) ? '' + objTomorrow.getDate() + domEnder2 : objTomorrow.getDate() + domEnder2,\r\n            months2 = new Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'),\r\n            curMonth2 = months2[objTomorrow.getMonth()],\r\n            tomorrow = curMonth2 + \" \" + dayOfWeek2 + \" \" + dayOfMonth2\r\n    setTomorrow(tomorrow)\r\n\r\n    var twotomorrow = \"\"\r\n        \r\n        var objTwoTomorrow = new Date(new Date().getTime() + 2 * 24 * 60 * 60 * 1000),\r\n            weekday3 = new Array('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'),\r\n            dayOfWeek3 = weekday3[objToday.getDay()],\r\n            domEnder3 = function() { var a = objTwoTomorrow; if (/1/.test(parseInt((a + \"\").charAt(0)))) return \"th\"; a = parseInt((a + \"\").charAt(1)); return 1 == a ? \"st\" : 2 == a ? \"nd\" : 3 == a ? \"rd\" : \"th\" }(),\r\n            dayOfMonth3 = tomorrow + ( objTwoTomorrow.getDate() < 10) ? '' + objTwoTomorrow.getDate() + domEnder3 : objTwoTomorrow.getDate() + domEnder3,\r\n            months3 = new Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'),\r\n            curMonth3 = months3[objTwoTomorrow.getMonth()],\r\n            twotomorrow = curMonth3 + \" \" + dayOfWeek3 + \" \" + dayOfMonth3\r\n    setTwoTomorrow(twotomorrow)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        gsap.fromTo(cityStateAnim.current, { autoAlpha: 0, x: -15 }, { autoAlpha: 1, x: 0, duration: 1, delay: 0.5 })\r\n        gsap.fromTo(tempDivAnim.current, { autoAlpha: 0, y: 15 }, { autoAlpha: 1, y: 0, duration: 1, delay: 0.5 })\r\n        gsap.fromTo(inputAnim.current, { autoAlpha: 0, y: -15 }, { autoAlpha: 1, y: 0, duration: 1, delay: 0.75 })\r\n    \r\n        gsap.fromTo(weatherDesAnim.current, { autoAlpha: 0, y: -15 }, { autoAlpha: 1, y: 0, duration: 0.75, delay: 1 })\r\n\r\n        gsap.fromTo(weatherHighAnim.current, { autoAlpha: 0, x: -15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.25 })\r\n        gsap.fromTo(weatherLowAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.25 })\r\n\r\n        gsap.fromTo(pressTitleAnim.current, { autoAlpha: 0, x: -15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.75 })\r\n        gsap.fromTo(pressDataAnim.current, { autoAlpha: 0, x: 15  }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.75 })\r\n    \r\n        gsap.fromTo(humiTitleAnim.current, { autoAlpha: 0, x: -15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.85 })\r\n        gsap.fromTo(humiDataAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.85 })\r\n\r\n        gsap.fromTo(windTitleAnim.current, { autoAlpha: 0, x: -15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.95 })\r\n        gsap.fromTo(windDataAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.95 })\r\n    }, [])\r\n    //useEffect\r\n\r\n    const actualtemp = Array.from(actualTemp)\r\n\r\n    //functions \r\n    const clickToday = () => {\r\n        if (globalNumber === 0) {\r\n            console.log(globalNumber)\r\n        }\r\n        else {\r\n            gsap.fromTo(tempDivAnim.current, { autoAlpha: 0, y: 15 }, { autoAlpha: 1, y: 0, duration: 1, delay: 0.2 })\r\n        \r\n            gsap.fromTo(weatherDesAnim.current, { autoAlpha: 0, y: -15 }, { autoAlpha: 1, y: 0, duration: 0.75, delay: 0.5 })\r\n\r\n            gsap.fromTo(weatherHighAnim.current, { autoAlpha: 0, x: -15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1 })\r\n            gsap.fromTo(weatherLowAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1 })\r\n\r\n            gsap.fromTo(pressDataAnim.current, { autoAlpha: 0, x: 15  }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.1 })\r\n        \r\n            gsap.fromTo(humiDataAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.2 })\r\n\r\n            gsap.fromTo(windDataAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.3 })\r\n        }\r\n        setGlobalNumber(0)\r\n        setButton1Color('rgba(22, 49, 114, 0.7)')\r\n        setButton2Color('rgba(255, 255, 255, 0.2)')\r\n        setButton3Color('rgba(255, 255, 255, 0.2)')\r\n    }\r\n\r\n    const clickTomorrow = () => {\r\n        if (globalNumber === 1) {\r\n            console.log(globalNumber)\r\n        }\r\n        else {\r\n            gsap.fromTo(tempDivAnim.current, { autoAlpha: 0, y: 15 }, { autoAlpha: 1, y: 0, duration: 1, delay: 0.2 })\r\n        \r\n            gsap.fromTo(weatherDesAnim.current, { autoAlpha: 0, y: -15 }, { autoAlpha: 1, y: 0, duration: 0.75, delay: 0.5 })\r\n\r\n            gsap.fromTo(weatherHighAnim.current, { autoAlpha: 0, x: -15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1 })\r\n            gsap.fromTo(weatherLowAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1 })\r\n\r\n            gsap.fromTo(pressDataAnim.current, { autoAlpha: 0, x: 15  }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.1 })\r\n        \r\n            gsap.fromTo(humiDataAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.2 })\r\n\r\n            gsap.fromTo(windDataAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.3 })\r\n        }\r\n        setGlobalNumber(1)\r\n        setButton2Color('rgba(22, 49, 114, 0.7)')\r\n        setButton1Color('rgba(255, 255, 255, 0.2)')\r\n        setButton3Color('rgba(255, 255, 255, 0.2)')\r\n    }\r\n\r\n    const clickTwoDay = () => {\r\n        if (globalNumber === 2) {\r\n            console.log(globalNumber)\r\n        }\r\n        else {\r\n            gsap.fromTo(tempDivAnim.current, { autoAlpha: 0, y: 15 }, { autoAlpha: 1, y: 0, duration: 1, delay: 0.2 })\r\n        \r\n            gsap.fromTo(weatherDesAnim.current, { autoAlpha: 0, y: -15 }, { autoAlpha: 1, y: 0, duration: 0.75, delay: 0.5 })\r\n\r\n            gsap.fromTo(weatherHighAnim.current, { autoAlpha: 0, x: -15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1 })\r\n            gsap.fromTo(weatherLowAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1 })\r\n\r\n            gsap.fromTo(pressDataAnim.current, { autoAlpha: 0, x: 15  }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.1 })\r\n        \r\n            gsap.fromTo(humiDataAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.2 })\r\n\r\n            gsap.fromTo(windDataAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.3 })\r\n        }\r\n        setGlobalNumber(2)\r\n        setButton3Color('rgba(22, 49, 114, 0.7)')\r\n        setButton2Color('rgba(255, 255, 255, 0.2)')\r\n        setButton1Color('rgba(255, 255, 255, 0.2)')\r\n    }\r\n\r\n    //mouse over \r\n    const mouseOverToday = () => {\r\n        if (button1Color === 'rgba(22, 49, 114, 0.7)') {\r\n            setButton1Color('rgba(96, 122, 182, 0.6)')\r\n        }\r\n        else {\r\n            setButton1Color('rgba(255, 255, 255, 0.3)')\r\n        }\r\n    }\r\n\r\n    const mouseOverTomorrow = () => {\r\n        if (button2Color === 'rgba(22, 49, 114, 0.7)') {\r\n            setButton2Color('rgba(96, 122, 182, 0.6)')\r\n        }\r\n        else {\r\n            setButton2Color('rgba(255, 255, 255, 0.3)')\r\n        }\r\n    }\r\n\r\n    const mouseOverTwoDay = () => {\r\n        if (button3Color === 'rgba(22, 49, 114, 0.7)') {\r\n            setButton3Color('rgba(96, 122, 182, 0.6)')\r\n        }\r\n        else {\r\n            setButton3Color('rgba(255, 255, 255, 0.3)')\r\n        }\r\n    }\r\n    //mouse over \r\n\r\n    //mouse leave \r\n    const mouseLeaveToday = () => {\r\n        if (button1Color === 'rgba(96, 122, 182, 0.6)' || button1Color === 'rgba(22, 49, 114, 0.7)') {\r\n            setButton1Color('rgba(22, 49, 114, 0.7)')\r\n        }\r\n        else {\r\n            setButton1Color('rgba(255, 255, 255, 0.2)')\r\n        }\r\n    }\r\n\r\n    const mouseLeaveTomorrow = () => {\r\n        if (button2Color === 'rgba(96, 122, 182, 0.6)' || button2Color === 'rgba(22, 49, 114, 0.7)') {\r\n            setButton2Color('rgba(22, 49, 114, 0.7)')\r\n        }\r\n        else {\r\n            setButton2Color('rgba(255, 255, 255, 0.2)')\r\n        }\r\n    }\r\n\r\n    const mouseLeaveTwoDay = () => {\r\n        if (button3Color === 'rgba(96, 122, 182, 0.6)' || button3Color === 'rgba(22, 49, 114, 0.7)') {\r\n            setButton3Color('rgba(22, 49, 114, 0.7)')\r\n        }\r\n        else {\r\n           setButton3Color('rgba(255, 255, 255, 0.2)') \r\n        }\r\n    }\r\n    //mouse leave \r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        setCityInput(e.target.value)\r\n\r\n        axios.get('http://api.openweathermap.org/data/2.5/forecast?q=' + cityInput + '&appid=2ccb7d2b46e1765b3c0cd9d9135e88cd')\r\n\r\n        .then(res => {\r\n            const info = res.data \r\n\r\n            console.log(info)\r\n\r\n            setCity(info.city.name)\r\n            setCountry(info.city.country)\r\n            setPopulation(info.city.population)\r\n\r\n            var actualtemp = []\r\n            var mintemp = []\r\n            var maxtemp = []\r\n\r\n            var feelslike = []\r\n\r\n            var humidity = []\r\n            var pressure = []\r\n            var windspeed = []\r\n\r\n            var daydescription = []\r\n            var daymain = []\r\n\r\n            for (let i = 0; i < 5; i++) {\r\n                actualtemp.push((info.list[i].main.temp - 273.15) * 9/5 + 32)\r\n                mintemp.push((info.list[i].main.temp_min - 273.15) * 9/5 + 32)\r\n                maxtemp.push((info.list[i].main.temp_max - 273.15) * 9/5 + 32)\r\n\r\n                feelslike.push((info.list[i].main.feels_like - 273.15) * 9/5 + 32)\r\n\r\n                humidity.push(info.list[i].main.humidity)\r\n                pressure.push(info.list[i].main.pressure)\r\n                windspeed.push(info.list[i].wind.speed * 2.237)\r\n\r\n                daydescription.push(info.list[i].weather[0].description)\r\n                daymain.push(info.list[i].weather[0].main)\r\n            }\r\n            setActualTemp(actualtemp)\r\n            setMinTemp(mintemp)\r\n            setMaxTemp(maxtemp)\r\n\r\n            setFeelsLike(feelslike)\r\n\r\n            setHumidity(humidity)\r\n            setPressure(pressure)\r\n            setWindSpeed(windspeed)\r\n\r\n            setDayDescription(daydescription)\r\n            setDayMain(daymain)\r\n\r\n            setErrorOpacity(0)\r\n\r\n            if (dayDescription[0].includes('rain') || dayMain[0].includes('rain')) {\r\n                setBodyBackground(\"url('https://images.pexels.com/photos/3742711/pexels-photo-3742711.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940')\")\r\n            }\r\n    \r\n            else if (dayDescription[0].includes('snow') || dayMain[0].includes('snow')) {\r\n                setBodyBackground(\"url('https://images.pexels.com/photos/414459/pexels-photo-414459.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940')\")\r\n            }\r\n    \r\n            else {\r\n                setBodyBackground(\"url('https://images.pexels.com/photos/2114014/pexels-photo-2114014.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940')\")\r\n            }\r\n\r\n            gsap.fromTo(cityStateAnim.current, { autoAlpha: 0, x: -15 }, { autoAlpha: 1, x: 0, duration: 1, delay: 0.2 })\r\n            gsap.fromTo(tempDivAnim.current, { autoAlpha: 0, y: 15 }, { autoAlpha: 1, y: 0, duration: 1, delay: 0.2 })\r\n        \r\n            gsap.fromTo(weatherDesAnim.current, { autoAlpha: 0, y: -15 }, { autoAlpha: 1, y: 0, duration: 0.75, delay: 0.5 })\r\n    \r\n            gsap.fromTo(weatherHighAnim.current, { autoAlpha: 0, x: -15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1 })\r\n            gsap.fromTo(weatherLowAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1 })\r\n    \r\n            gsap.fromTo(pressDataAnim.current, { autoAlpha: 0, x: 15  }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.1 })\r\n        \r\n            gsap.fromTo(humiDataAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.2 })\r\n    \r\n            gsap.fromTo(windDataAnim.current, { autoAlpha: 0, x: 15 }, { autoAlpha: 1, x: 0, duration: 0.75, delay: 1.3 })\r\n        })\r\n\r\n        .catch(err => {\r\n            console.log(err)\r\n            setErrorOpacity(1)\r\n        })\r\n        setCityInput('')\r\n        \r\n        var form = document.getElementById(\"myForm\");\r\n        form.reset();\r\n    }\r\n\r\n    const handleChange = e => {\r\n        setCityInput(e.target.value)\r\n    }\r\n    //functions \r\n\r\n    return (\r\n        <div style={{display: 'flex', flexDirection: 'row'}}>\r\n\r\n            <div className=\"left-side-tab\">\r\n\r\n                <div ref={cityStateAnim} className=\"absolute-city-div\">{city}, {country}</div>\r\n\r\n                <div className=\"left-top-side\">\r\n                    <form ref={inputAnim} className=\"form-input\" onSubmit={handleSubmit} onChange={handleChange} id=\"myForm\">\r\n                        <input type=\"text\" placeholder=\"search for a city\" />\r\n                        <div className=\"city-not-found\" style={{opacity: errorOpacity}}>City Not Found</div>\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"left-bottom-side\">\r\n                    <div className=\"left-bottom-side-container\" ref={tempDivAnim}>\r\n                        <div className=\"actual-temp\">{Math.round(actualtemp[globalNumber])}&#176;</div>\r\n                        <div className=\"long-div\"></div>\r\n                        <div className=\"feels-like\">feels like {Math.round(feelsLike[globalNumber])}&#176;</div>\r\n                    </div>\r\n                    \r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"right-side-tab\">\r\n\r\n                <div className=\"box-container-right-side\">\r\n\r\n                    <div className=\"day-description\" ref={weatherDesAnim} >{dayDescription[globalNumber]}</div>\r\n\r\n                    <div style={{width: '100%', display: 'flex', justifyContent: 'space-between'}}>\r\n                        <div className=\"high-temp\" ref={weatherHighAnim}>High: {Math.round(maxTemp[globalNumber])}&#176;</div>\r\n                        <div className=\"low-temp\" ref={weatherLowAnim}>Low: {Math.round(minTemp[globalNumber])}&#176;</div>\r\n                    </div>\r\n \r\n                </div>\r\n\r\n                <div className=\"box-container-right-side\" style={{flexDirection: 'row', height: '15%'}}>\r\n                    <div className=\"pressure-title\" ref={pressTitleAnim}>Pressure</div>\r\n                    <div className=\"pressure\" ref={pressDataAnim}>{pressure[globalNumber]} hPa</div>\r\n                </div>\r\n\r\n                <div className=\"box-container-right-side\" style={{flexDirection: 'row', height: '15%'}}>\r\n                    <div className=\"pressure-title\" ref={humiTitleAnim}>Humidity</div>\r\n                    <div className=\"pressure\" ref={humiDataAnim}>{humidity[globalNumber]}%</div>\r\n                </div>\r\n\r\n                <div className=\"box-container-right-side\" style={{flexDirection: 'row', height: '15%'}}>\r\n                    <div className=\"pressure-title\" ref={windTitleAnim}>Wind Speed</div>\r\n                    <div className=\"pressure\" ref={windDataAnim}>{Math.round(windSpeed[globalNumber] * 10) / 10} mph</div>\r\n                </div>\r\n\r\n                <div className=\"box-container-right-side\" style={{flexDirection: 'row'}}>\r\n                    <div className=\"button-box-container\">\r\n                        <button onClick={clickToday} onMouseOver={mouseOverToday} onMouseLeave={mouseLeaveToday}\r\n                            style={{backgroundColor: button1Color}}>\r\n                                {today}\r\n                        </button>\r\n\r\n                        <button onClick={clickTomorrow} onMouseOver={mouseOverTomorrow} onMouseLeave={mouseLeaveTomorrow}\r\n                            style={{backgroundColor: button2Color}}>\r\n                                {tomorrow}\r\n                        </button>\r\n\r\n                        <button onClick={clickTwoDay} onMouseOver={mouseOverTwoDay} onMouseLeave={mouseLeaveTwoDay}\r\n                            style={{backgroundColor: button3Color}}>\r\n                                {twoTomorrow}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPage\r\n",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":44,"column":12,"nodeType":"48","messageId":"49","endLine":44,"endColumn":22},{"ruleId":"50","severity":1,"message":"51","line":143,"column":8,"nodeType":"52","endLine":143,"endColumn":10,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":149,"column":23,"nodeType":"56","messageId":"57","endLine":149,"endColumn":81},{"ruleId":"58","severity":1,"message":"59","line":151,"column":155,"nodeType":"60","messageId":"61","endLine":151,"endColumn":157},{"ruleId":"58","severity":1,"message":"59","line":151,"column":171,"nodeType":"60","messageId":"61","endLine":151,"endColumn":173},{"ruleId":"58","severity":1,"message":"59","line":151,"column":187,"nodeType":"60","messageId":"61","endLine":151,"endColumn":189},{"ruleId":"54","severity":1,"message":"55","line":153,"column":22,"nodeType":"56","messageId":"57","endLine":153,"endColumn":116},{"ruleId":"62","severity":1,"message":"63","line":155,"column":13,"nodeType":"48","messageId":"64","endLine":155,"endColumn":18},{"ruleId":"54","severity":1,"message":"55","line":161,"column":24,"nodeType":"56","messageId":"57","endLine":161,"endColumn":82},{"ruleId":"58","severity":1,"message":"59","line":163,"column":159,"nodeType":"60","messageId":"61","endLine":163,"endColumn":161},{"ruleId":"58","severity":1,"message":"59","line":163,"column":175,"nodeType":"60","messageId":"61","endLine":163,"endColumn":177},{"ruleId":"58","severity":1,"message":"59","line":163,"column":191,"nodeType":"60","messageId":"61","endLine":163,"endColumn":193},{"ruleId":"54","severity":1,"message":"55","line":165,"column":23,"nodeType":"56","messageId":"57","endLine":165,"endColumn":117},{"ruleId":"62","severity":1,"message":"65","line":167,"column":13,"nodeType":"48","messageId":"64","endLine":167,"endColumn":21},{"ruleId":"54","severity":1,"message":"55","line":173,"column":24,"nodeType":"56","messageId":"57","endLine":173,"endColumn":82},{"ruleId":"58","severity":1,"message":"59","line":175,"column":162,"nodeType":"60","messageId":"61","endLine":175,"endColumn":164},{"ruleId":"58","severity":1,"message":"59","line":175,"column":178,"nodeType":"60","messageId":"61","endLine":175,"endColumn":180},{"ruleId":"58","severity":1,"message":"59","line":175,"column":194,"nodeType":"60","messageId":"61","endLine":175,"endColumn":196},{"ruleId":"54","severity":1,"message":"55","line":177,"column":23,"nodeType":"56","messageId":"57","endLine":177,"endColumn":117},{"ruleId":"62","severity":1,"message":"66","line":179,"column":13,"nodeType":"48","messageId":"64","endLine":179,"endColumn":24},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'population' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cityInput', 'dayDescription', and 'dayMain'. Either include them or remove the dependency array.","ArrayExpression",["69"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'today' is already defined.","redeclared","'tomorrow' is already defined.","'twotomorrow' is already defined.","no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [cityInput, dayDescription, dayMain]",{"range":"72","text":"73"},[4837,4839],"[cityInput, dayDescription, dayMain]"]